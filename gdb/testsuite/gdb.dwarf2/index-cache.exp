#   Copyright 2017 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This test checks that the index-cache feature generates the expected files at
# the expected location.

# List the files in DIR on the host (where GDB-under-test runs).
# Return a list of two elements:
#   - 0 on success, -1 on failure
#   - the list of files on success, empty on failure

proc ls_host { dir } {
    lassign [remote_exec host ls "-1 $dir"] ret output

    if { $ret != 0 } {
	return -1
    }

    # ls -1 returns a list separated by \r\n.  split will return a bunch of
    # empty entries (it treats a sequence of split characters as separate
    # fields, plus there is a \r\n at the end of the result).  Ignore empty
    # list elements.
    set filtered {}
    set files [split $output \r\n]

    foreach file $files {
	if { $file != "" } {
	    lappend filtered $file
	}
    }

    return "0 $filtered"
}

# Execute "show index-cache stats" and verify the output against expected
# values.

proc check_cache_stats { expected_hits expected_misses } {
    set re [multi_line \
	"  Cache hits .this session.: $expected_hits" \
	"Cache misses .this session.: $expected_misses" \
    ]

    gdb_test "show index-cache stats" $re "check index-cache stats"
}

standard_testfile

if { [prepare_for_testing "failed to prepare" $testfile $srcfile] } {
    return
}

# The cache dir should be on the host (possibly remote), so we can't use the
# standard output directory for that (it's on the build machine).
lassign [remote_exec host mktemp -d] ret cache_dir

if { $ret != 0 } {
    fail "couldn't create temporary cache dir"
    return
}

# The ouput of mktemp contains an end of line, remove it.
set cache_dir [string trimright $cache_dir \r\n]

# Check that the index cache is disabled by default.
gdb_test \
    "show index-cache" \
    " is currently disabled." \
    "index-cache is disabled by default"

# Test that we can enable it and "show index-cache" reflects that.
gdb_test_no_output "set index-cache on" "enable index cache"
gdb_test \
    "show index-cache" \
    " is currently enabled." \
    "index-cache is now enabled"

# Test the "set/show index-cache directory" commands.
gdb_test "set index-cache directory" "Argument required.*" "set index-cache directory without arg"
gdb_test_no_output "set index-cache directory /tmp" "change the index cache directory"
gdb_test \
    "show index-cache directory" \
    "The directory of the index cache is \"/tmp\"."  \
    "show index cache directory"

# Test loading a binary with the cache disabled.  No file should be created.

with_test_prefix "disabled 1" {
    save_vars { GDBFLAGS } {
	set GDBFLAGS "$GDBFLAGS -iex \"set index-cache directory $cache_dir\""
	set GDBFLAGS "$GDBFLAGS -iex \"set index-cache off\""

	clean_restart ${testfile}

	lassign [ls_host $cache_dir] ret files
	set nfiles [llength $files]
	gdb_assert "$nfiles == 0" "no files were created"

	check_cache_stats 0 0
    }
}

# Now test with the cache enabled, we expect to have exactly one file created.

with_test_prefix "enabled, expected miss" {
    save_vars { GDBFLAGS } {
	set GDBFLAGS "$GDBFLAGS -iex \"set index-cache directory $cache_dir\""
	set GDBFLAGS "$GDBFLAGS -iex \"set index-cache on\""

	clean_restart ${testfile}

	lassign [ls_host $cache_dir] ret files
	set nfiles [llength $files]
	gdb_assert "$nfiles == 1" "one file was created"

	set build_id [get_build_id  [standard_output_file ${testfile}]]
	if { $build_id == "" } {
	    fail "couldn't get executable build id"
	    return
	}

	set index_file [lindex $files 0]
	set test "expected file is there"
	if { "$index_file" == "${build_id}.gdb-index" } {
	    pass $test
	} else {
	    fail $test
	}

	check_cache_stats 0 1
    }
}

# Now test again with the cache enabled, this time we should have one file (the
# same), but one cache read hit.

with_test_prefix "enabled, expected hit" {
    save_vars { GDBFLAGS } {
	set GDBFLAGS "$GDBFLAGS -iex \"set index-cache directory $cache_dir\""
	set GDBFLAGS "$GDBFLAGS -iex \"set index-cache on\""

	clean_restart ${testfile}

	lassign [ls_host $cache_dir] ret files
	set nfiles [llength $files]
	gdb_assert "$nfiles == 1" "still one file"

	check_cache_stats 1 0
    }
}

# Test again, but with the cache disabled.  We should have no hit, even though
# we have the index in cache.

with_test_prefix "disabled 2" {
    save_vars { GDBFLAGS } {
	set GDBFLAGS "$GDBFLAGS -iex \"set index-cache directory $cache_dir\""
	set GDBFLAGS "$GDBFLAGS -iex \"set index-cache off\""

	clean_restart ${testfile}

	lassign [ls_host $cache_dir] ret files
	set nfiles [llength $files]
	gdb_assert "$nfiles == 1" "still one file"

	check_cache_stats 0 0
    }
}

# Test that specifying a directory that does not exist works.

with_test_prefix "enabled, directory that does not exist" {
    save_vars { GDBFLAGS } {
	set GDBFLAGS "$GDBFLAGS -iex \"set index-cache directory $cache_dir/a/b/c\""
	set GDBFLAGS "$GDBFLAGS -iex \"set index-cache on\""

	clean_restart ${testfile}

	lassign [ls_host $cache_dir/a/b/c] ret files
	set nfiles [llength $files]
	gdb_assert "$nfiles == 1" "one file was created"

	check_cache_stats 0 1
    }
}
